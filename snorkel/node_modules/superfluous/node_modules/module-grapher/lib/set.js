function Set() {
  this._h = {};
}

(function(p) {
  p.add = add;
  function add(module) {
    this._h[module.id] = module;
    return this;
  }

  p.remove = remove;
  function remove(module) {
    delete this._h[module.id];
    return this;
  }

  p.has = has;
  function has(module) {
    return module.id in this._h;
  }

  p.hasModuleWithId = hasModuleWithId;
  function hasModuleWithId(id) {
    return id in this._h;
  }

  p.update = update;
  function update() {
    for (var i = 0, length = arguments.length; i < length; i++) {
      arguments[i].forEach(this.add, this);
    }
    return this;
  }

  p.forEach = forEach;
  function forEach(callback, thisObj) {
    var _h = this._h;
    for (var id in _h) { callback.call(thisObj, _h[id]); }
    return this;
  }

  p.toArray = toArray;
  function toArray() {
    var _h = this._h,
        arr = [];

    for (var id in _h) { arr.push(_h[id]); }
    return arr;
  }

  p.toObject = toObject;
  function toObject() {
    var _h = this._h,
        obj = {};

    for (var id in _h) { obj[id] = _h[id]; }
    return obj;
  }

  p.clear = clear;
  function clear() {
    this._h = {};
    return this;
  }

  p.clone = clone;
  function clone() {
    var set = new Set();
    set.update(this);
    return set;
  }
  
  p.getSize = getSize;
  function getSize() {
    return this.toArray().length;
  }
})(Set.prototype);

exports.Set = Set;
exports.create = createSet;
exports.createSet = createSet;
function createSet() {
  return new Set();
}