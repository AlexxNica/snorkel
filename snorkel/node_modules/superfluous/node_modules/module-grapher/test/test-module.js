var module = require('../lib/module'),
    identifier = require('../lib/identifier');

var assert = require('./custom-asserts');

suite('Module', function() {
  test("Module#setIdentifier sets module.identifier and module.id", function() {
    var m = module.create(identifier.create('foo')),
        ident = identifier.create('bar');

    m.setIdentifier(ident);
    assert.strictEqual(ident, m.identifier);
    assert.strictEqual('bar', m.id);
  });

  test("Module#setIdentifier throws an error when passed a relative identifier", function() {
    var m = module.create(identifier.create('foo'));

    assert.throws(function() {
      m.setIdentifier(identifier.create('./bar'));
    }, TypeError);
  });

  test("Module#resolveIdentifier resolves the identifier relative to itself.", function() {
    var m = module.create(identifier.create('foo/bar')),
        ident = identifier.create('./baz');

    assert.strictEqual(identifier.Identifier, m.resolveIdentifier(ident).constructor);
    assert.strictEqual('foo/baz', m.resolveIdentifier(ident).toString());
    
    m._isDir = true;
    assert.strictEqual('foo/bar/baz', m.resolveIdentifier(ident).toString(), "Module is a dir module");
  });

  test("Module#getHashCode returns an md5 hash of the raw src code", function() {
    var m = module.create(identifier.create('bar'));

    m.raw = "foo";
    assert.strictEqual("acbd18db4cc2f85cedef654fccc4a4d8", m.getHashCode());
  });
  
  test("Module#getHashCode returns an md5 hash of the raw src code", function() {
    
  });
});

